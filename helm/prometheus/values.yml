prometheus:
  # additionalScrapeConfigs:
  #   enabled: true
  #   type: external
  #   external:
  #     name: additional-scrape-configs
  #     key: scrape_configs.yaml
  prometheusSpec:
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    podMonitorNamespaceSelector:
      any: true
    podMonitorSelector: {}
    ruleNamespaceSelector:
      any: true
    ruleSelector: {}
    serviceMonitorNamespaceSelector:
      any: true
    serviceMonitorSelector: {}

prometheusOperator:
  enabled: true
  namespaces: ''
  denyNamespaces: ''
  prometheusInstanceNamespaces: ''
  alertmanagerInstanceNamespaces: ''
  thanosRulerInstanceNamespaces: ''

grafana:
  grafana.ini:
    feature_toggles:
      enable: 'tempoApmTable tempoBackendSearch'
  additionalDataSources:
  - name: Tempo
    type: tempo
    uid: tempo
    url: http://tempo.tempo:3100
    access: proxy
    jsonData:
      httpMethod: GET
      tracesToMetrics:
        datasourceUid: 'prometheus'
        tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]
        queries:
          - name: 'Sample query'
            query: 'sum(rate(tempo_spanmetrics_latency_bucket{$__tags}[5m]))'
      serviceMap:
        datasourceUid: 'prometheus'
      search:
        hide: false
      nodeGraph:
        enabled: true
    datasources:
      exemplarTraceIdDestinations:
        datasourceUid: tempo
        traceIdLabelName: traceID